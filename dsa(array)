1)reverse an array

#include <iostream>
using namespace std; 

void reverse(int arr[],int n){
    int i=0,j=n-1;
    while(i<j){
        swap(arr[i],arr[j]);
        i++;
        j--;
    }
}
int main()
{
    int arr[]={1,2,3};
    int n=sizeof(arr)/sizeof(arr[0]);
    cout<<"array before reversal: ";
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    reverse(arr,n);
    cout<<"\nreverse of array is: ";
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}

2)missing number in an array

#include <iostream>
using namespace std; 

int missing(int arr[],int n){
    int xor1=0;
    int xor2=0;
    for(int i=0;i<n;i++){
        xor1=xor1^arr[i];
    }
    for(int i=0;i<=n;i++){
        xor2=xor2^(i+1);
    }
    return (xor1^xor2);
}
int main(){
    int arr[]={1,2,3,5};
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=missing(arr,n);
    cout<<result;
}

3)maximum no.of 1s 
#include <iostream>
using namespace std; 

int maximum(int arr[],int n){
    int count=0,i=0,maxcount=0;
    while(i<n){
        if(arr[i]==1){
            count++;
            maxcount=max(count,maxcount);
        }
        else{
            count=0;
        }
        i++;
    }
    return maxcount;
}
int main(){
    int arr[]={1,1,1,1,0,0,1};
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=maximum(arr,n);
    cout<<result;
}

4)find the number that appears once, others twice

#include <iostream>
using namespace std; 

int once(int arr[],int n){
    int xor1=0;
    for(int i=0;i<n;i++){
        xor1=xor1^arr[i];
    }
    return xor1;
}
int main(){
    int arr[]={4,2,2};
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=once(arr,n);
    cout<<result;
}

5)move all zeroes to the end
#include <iostream>
using namespace std; 

void subarray(int arr[],int n){
    int j=-1;
    for(int i=0;i<n;i++){
        if(arr[i]==0){
            j=i;
            break;
        }
    }
    if(j==-1) cout<<0;
    
    for(int i=j+1;i<n;i++){
        if(arr[i]!=0){
            swap(arr[i],arr[j]);
            j++;
        }
    }
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}
int main(){
    int arr[]={0,2,0,5,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    subarray(arr,n);
}

6) largest and second largest
#include <bits/stdc++.h>
using namespace std;

int main(){
    int arr[]={2,5,1,3,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    int max=arr[0];
    for (int i=0;i<n;i++){
        if(max<arr[i]){
            max=arr[i];
        }
    }
    int a=arr[0];
    for (int i=0;i<n;i++){
        if(a<arr[i]&&arr[i]<max){
            a=arr[i];
        }
    }
    cout<<"largest element is: "<<max<<endl;
    cout<<"second largest element is: "<<a;
}

7)check if sorted
#include <bits/stdc++.h>
using namespace std;

bool check(int arr[],int n){
    for(int i=1;i<n;i++){
        if(arr[i]<arr[i-1])
            return false;
    }
    return true;
}

int main(){
    int arr[]={2,1,3,4,5};
    int n=sizeof(arr)/sizeof(arr[0]);
    bool result=check(arr, n);
    cout<<(result?"true":"false");
}

8)remove duplicates in sorted array#include <bits/stdc++.h>
using namespace std;

int duplicate(int arr[],int n){
    int j=0;
    for(int i=1;i<n;i++){
        if(arr[i]!=arr[j]){
            j++;
            arr[j]=arr[i];
        }
    }
    return j+1;
}

int main(){
    int arr[]={1,2,2,3,4,4,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    int a=duplicate(arr,n);
    for(int i=0;i<a;i++){
        cout<<arr[i]<<" ";
    }
}

9)left rotate array by 1 place

#include <bits/stdc++.h>
using namespace std;

void rotate(int arr[],int n){
    int temp=arr[0];
    for(int i=0;i<n-1;i++){
        arr[i]=arr[i+1];
        }
    arr[n-1]=temp;
}

int main(){
    int arr[]={1,2,3,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    rotate(arr,n);
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}

10)linear search

#include <bits/stdc++.h>
using namespace std;

void linear_search(int arr[],int n,int ele){
    for(int i=0;i<n-1;i++){
        if(arr[i]==ele){
            cout<<"element found at index: "<<i;
        }
    }
}

int main(){
    int arr[]={1,2,3,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    int ele=3;
    linear_search(arr,n,ele);
}

11) find the majority element that occurs more than n/2 times

#include <iostream>
using namespace std;

int majority(int arr[],int n){
    int ele;
    int count=0;
    for(int i=0;i<n;i++){
        if(count==0){
            count=1;
            ele=arr[i];
        }
        else if(ele==arr[i]) count++;
        else{
            count--;
        }
    }
    int a=0;
    for(int i=0;i<n;i++){
        if(arr[i]==ele) a++;
    }
    if(a>n/2) return ele;
    return -1;
}

int main(){
    int arr[]={2,4,1,4,4,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=majority(arr,n);
    cout<<result;
}

12)kadane's algorithm to find maximum subarray sum in an array

#include <iostream>
#include <climits>
using namespace std;

int kadane(int arr[],int n){
    int sum=0;
    int max=INT_MIN;
    for(int i=0;i<n;i++){
        sum+=arr[i];
        if(sum>max){
            max=sum;
        }
        if(sum<0){
            sum=0;
        }
    }
    return max;
}

int main(){
    int arr[]={-2,1,-3,4,-1,2,1,-5,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=kadane(arr,n);
    cout<<result;
}

13)stock buy and sell

#include <iostream>
#include <climits>
using namespace std;

void profit(int arr[],int n){
    int sum=0;
    int min=arr[0];
    int buy_day=0;
    int sell_day=0;
    if(n==0) return;
    for(int i=1;i<n;i++){
        if(arr[i]<min){
            min=arr[i];
            buy_day=i;
        }
    int profit=arr[i]-min;
    if(profit>sum){
        sum=profit;
        sell_day=i;
        }
    }
    cout<<"buy on day "<<buy_day<<endl;
    cout<<"sell on day "<<sell_day<<endl;
    cout<<"profit: "<<sum<<endl;
}

int main(){
    int arr[]={7,1,5,3,6,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    profit(arr,n);
}

14)binary search

#include <bits/stdc++.h>
using namespace std;

void binary_search(int arr[],int n,int target){
    int low=0,high=n-1;
    while(low<=high){
        int mid=(low+high)/2;
        if(arr[mid]==target){
            cout<<"element found at index: "<<mid;
            return;
        }
        else if(target<arr[mid]){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
}

int main(){
    int arr[]={3, 4, 6, 7, 9, 12, 16, 17};
    int target=12;
    int n=sizeof(arr)/sizeof(arr[0]);
    binary_search(arr,n,target);
}

15)lower bound of an element

#include <bits/stdc++.h>
using namespace std;

int lower_bound(int arr[],int n,int target){
    int low=0,high=n-1;
    int a=n;
    while(low<=high){
        int mid=(low+high)/2;
        if(target<=arr[mid]){
            a=mid;
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return a;
}

int main(){
    int arr[]={3, 4, 6, 7, 9, 12, 16, 17};
    int target=14;
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=lower_bound(arr,n,target);
    cout<<result;
}

16)upper bound of an element

#include <bits/stdc++.h>
using namespace std;

int upper_bound(int arr[],int n,int target){
    int low=0,high=n-1;
    int a=n;
    while(low<=high){
        int mid=(low+high)/2;
        if(arr[mid]>target){
            a=mid;
            high=mid-1;;
        }
        else{
            low=mid+1;
        }
    }
    return a;
}

int main(){
    int arr[]={3, 4, 6, 7, 9, 12, 16, 17};
    int target=3;
    int n=sizeof(arr)/sizeof(arr[0]);
    int result=upper_bound(arr,n,target);
    cout<<result;
}

19)floor ceil

#include <bits/stdc++.h>
using namespace std;

int find_floor(int arr[],int n,int k){
    int low=0;
    int high=n-1;
    int ans=-1;
    while(low<=high){
        int mid=(low+high)/2;
        if(arr[mid]<=k){
            ans=arr[mid];
            low=mid+1;
        }
        else if(arr[mid]>k){
            high=mid-1;
        }
    }
    return ans;
}

int find_ceil(int arr[],int n,int k){
    int low=0;
    int high=n-1;
    int ans=-1;
    while(low<=high){
        int mid=(low+high)/2;
        if(arr[mid]>=k){
            ans=arr[mid];
            high=mid-1;
        }
        else if(arr[mid]<k){
            low=mid+1;
        }
    }
    return ans;
}

pair<int,int> find_floor_and_ceil(int arr[],int n,int k){
    int a =find_floor(arr,n,k);
    int b= find_ceil(arr,n,k);
    return make_pair(a,b);
}

int main(){
    int arr[]={3, 4, 4, 7, 8, 10};
    int n=sizeof(arr)/sizeof(arr[0]);
    int k=5;
    pair<int,int> result=find_floor_and_ceil(arr,n,k);
    cout<<result.first<<" "<<result.second;
}

20)last occurence in a sorted array

#include <bits/stdc++.h>
using namespace std;

int insert_pos(int arr[],int n,int val){
    int low=0,high=n-1;
    int ans=-1;
    while(low<=high){
        int mid=(low+high)/2;
        if(arr[mid]==val){
            ans=mid;
            low=mid+1;
        }
        else if(arr[mid]>val){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return ans;
}

int main(){
    int arr[]={3,4,13,13,20,40};
    int n=sizeof(arr)/sizeof(arr[0]);
    int val=13;
    int result=insert_pos(arr,n,val);
    cout<<result;
}

21)search insert position

#include <bits/stdc++.h>
using namespace std;
int insert_pos(int arr[],int n,int val){
    int low=0,high=n-1;
    int ans=n;
    while(low<=high){
        int mid=(low+high)/2;
        if(arr[mid]>=val){
            ans=mid;
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return ans;
}
int main(){
    int arr[]={2,3,6,7};
    int n=sizeof(arr)/sizeof(arr[0]);
    int val=5;
    int result=insert_pos(arr,n,val);
    cout<<result;
}
