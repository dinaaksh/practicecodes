1)insertion all cases

  #include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* next;
};

Node* head=nullptr;

void insert_at_beginning(int val){
    Node* newnode=new Node;
    newnode->data=val;
    newnode->next=head;
    head=newnode;
}

void insert_at_end(int val){
    Node* newnode=new Node;
    newnode->data=val;
    newnode->next=nullptr;
    if(head==nullptr){
        head=newnode;
        return;
    }
    Node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    temp->next=newnode;
}

void insert_at_position(int pos,int val){
    Node* newnode=new Node;
    newnode->data=val;
    if(pos==1){
        newnode->next=head;
        head=newnode;
        return;
    }
    Node* temp=head;
    for(int i=1;temp!=nullptr && i<pos-1;i++){
        temp=temp->next;
    }
    newnode->next=temp->next;
    if(temp==nullptr){
        cout<<"Index out of bounds"<<endl;
    }
    newnode->next=temp->next;
    temp->next=newnode;
}

void print_list(){
    Node* temp=head;
    while(temp!=nullptr){
        cout<<" "<<temp->data;
        temp=temp->next;
    }
    cout<<endl;
}

int main(){
    insert_at_beginning(2);
    insert_at_beginning(3);
    insert_at_end(4);
    insert_at_position(1,5);
    print_list();
}

2)deletion all cases

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node *next;
};

Node* head=nullptr;

void delete_at_end(){
    Node* temp=head;
    if(head==nullptr){
        return;
    }
    if(head->next==nullptr){
        delete head;
        head=nullptr;
        return;
    }
    while(temp->next->next!=nullptr){
        temp=temp->next;
    }
    delete temp->next;
    temp->next=nullptr;
}
    
void delete_at_beginning(){
    Node* temp=head;
    if(head==nullptr){
        return;
    }
    head=head->next;
    delete temp;
}

void delete_at_pos(int pos){
    if(head==nullptr){
        return;
    }
    if(pos==1){
        Node* place=head;
        head=head->next;
        delete place;
        return;
    }
    Node* temp=head;
    for(int i=1;temp!=nullptr && i<pos-1;i++){
        temp=temp->next;
    } 
    if(temp==nullptr||temp->next==nullptr){
        return;
    }
    Node* place=temp->next;
    temp->next=temp->next->next;
    delete place;
}

3)length of linked list

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* next;
};

Node* head=nullptr;

int length(){
    Node* temp=head;
    int count=0;
    while(temp!=nullptr){
        count++;
        temp=temp->next;
    }
    return count;
}

int main(){
    vector<int> arr={1,2,3,4,5};
    if(!arr.empty()){
        head=new Node{arr[0],nullptr};
        Node* temp=head;
        for(int i=1;i<arr.size();i++){
            temp->next=new Node{arr[i],nullptr};
            temp=temp->next;
        }
    }
    int result=length();
    cout<<result;
    while(head!=nullptr){
        Node* temp=head;
        head=head->next;
        delete temp;
    }
}

4)search an element in linked list

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* next;
};


int search(Node* head,int val){
    Node* temp=head;
    int index=0;
    while(temp!=nullptr){
        if(temp->data==val){
            return index;
        }
        else{
            temp=temp->next;
            index++;
        }
    }
    return -1;
}

int main(){
    vector<int> arr={1,2,3,4};
    int val=4;
    Node* head=new Node{arr[0],nullptr};
    head->next=new Node{arr[1],nullptr};
    head->next->next=new Node{arr[2],nullptr};
    head->next->next->next=new Node{arr[3],nullptr};
    int result=search(head,4);
    cout<<result;
    while(head!=nullptr){
        Node* temp=head;
        head=head->next;
        delete temp;
    }
}

5)insertion in doubly linked list

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    Node* prev;
    
    Node(int data1,Node* next1,Node* prev1){
        data=data1;
        next=next1;
        prev=prev1;
    }
    
    Node(int data1){
        data=data1;
        next=nullptr;
        prev=nullptr;
    }
};

Node* head=nullptr;

void insert_at_beginning(int val){
    Node* newnode=new Node(val);
    newnode->next=head;
    if(head!=nullptr){
        head->prev=newnode;
    }
    head=newnode;
}

void insert_at_end(int val){
    Node* newnode=new Node(val);
    newnode->next=nullptr;
    if(head==nullptr){
        head=newnode;
        return;
    }
    Node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    if(temp!=nullptr){
        temp->next=newnode;
        newnode->prev=temp;
    }
}

void insert_at_pos(int val,int pos){
    Node* newnode=new Node(val);
    if(pos==1){
        newnode->next=head;
        if(head!=nullptr){
        head->prev=newnode;
        }
        head=newnode;
        return;
    }
    Node* temp=head;
    for(int i=1;temp!=nullptr && i<pos-1;i++){
        temp=temp->next;
    }
    if(temp==nullptr){
        delete newnode;
        return;
    }
    newnode->next=temp->next;
    newnode->prev=temp;
    if(temp->next!=nullptr){
        temp->next->prev=newnode;
    }
    temp->next=newnode;
}

void display(){
    if(head==nullptr){
        return;
    }
    Node* temp=head;
    while(temp!=nullptr){
        cout<<" "<<temp->data;
        temp=temp->next;
    }
    cout<<endl;
}

int main(){
    insert_at_beginning(2);
    insert_at_beginning(5);
    insert_at_end(3);
    insert_at_pos(4,3);
    display();
}

6)deletion in doubly linked list

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* prev;
    Node* next;
    
    Node(int data1,Node* prev1, Node* next1){
        data=data1;
        prev=prev1;
        next=next1;
    }
    Node(int data1){
        data=data1;
        prev=nullptr;
        next=nullptr;
    }
};

Node* head=nullptr;

void delete_at_beginning(){
    if(head==nullptr){
        return;
    }
    Node* temp=head;
    if(head->next!=nullptr){
        head=head->next;
        head->prev=nullptr;
    }
    else{
        head=nullptr;
    }
    delete temp;
}

void delete_at_end(){
    if(head==nullptr){
        return;
    }
    if(head->next==nullptr){
        delete head;
        head=nullptr;
        return;
    }
    Node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    temp->prev->next=nullptr;
    delete temp;
}

void delete_at_pos(int pos){
    if(head==nullptr||pos<=0){
        return;
    }
    
    Node* temp=head;
    
    if(pos==1){
        head=head->next;
        if(head!=nullptr){
            head->prev=nullptr;
        }
        delete temp;
        return;
    }
    
    for(int i=1;temp!=nullptr && i<pos;i++){
        temp=temp->next;
    }
    
    if(temp==nullptr){
        return;
    }
    
    if(temp->next!=nullptr){
        temp->next->prev=temp->prev;
        temp->prev->next=temp->next;
    }
    else{
        temp->prev->next=nullptr;
    }
    delete temp;
}

int main(){
    vector<int> arr={2,4,1,3};
    head=new Node(arr[0]);
    Node* current=head;
    for(int i=1;i<arr.size();i++){
        Node* newnode=new Node(arr[i]);
        current->next=newnode;
        newnode->prev=current;
        current=newnode;
    }
}
