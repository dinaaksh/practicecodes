1)insertion all cases

  #include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* next;
};

Node* head=nullptr;

void insert_at_beginning(int val){
    Node* newnode=new Node;
    newnode->data=val;
    newnode->next=head;
    head=newnode;
}

void insert_at_end(int val){
    Node* newnode=new Node;
    newnode->data=val;
    newnode->next=nullptr;
    if(head==nullptr){
        head=newnode;
        return;
    }
    Node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    temp->next=newnode;
}

void insert_at_position(int pos,int val){
    Node* newnode=new Node;
    newnode->data=val;
    if(pos==1){
        newnode->next=head;
        head=newnode;
        return;
    }
    Node* temp=head;
    for(int i=1;temp!=nullptr && i<pos-1;i++){
        temp=temp->next;
    }
    newnode->next=temp->next;
    if(temp==nullptr){
        cout<<"Index out of bounds"<<endl;
    }
    newnode->next=temp->next;
    temp->next=newnode;
}

void print_list(){
    Node* temp=head;
    while(temp!=nullptr){
        cout<<" "<<temp->data;
        temp=temp->next;
    }
    cout<<endl;
}

int main(){
    insert_at_beginning(2);
    insert_at_beginning(3);
    insert_at_end(4);
    insert_at_position(1,5);
    print_list();
}

2)deletion all cases

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node *next;
};

Node* head=nullptr;

void delete_at_end(){
    Node* temp=head;
    if(head==nullptr){
        return;
    }
    if(head->next==nullptr){
        delete head;
        head=nullptr;
        return;
    }
    while(temp->next->next!=nullptr){
        temp=temp->next;
    }
    delete temp->next;
    temp->next=nullptr;
}
    
void delete_at_beginning(){
    Node* temp=head;
    if(head==nullptr){
        return;
    }
    head=head->next;
    delete temp;
}

void delete_at_pos(int pos){
    if(head==nullptr){
        return;
    }
    if(pos==1){
        Node* place=head;
        head=head->next;
        delete place;
        return;
    }
    Node* temp=head;
    for(int i=1;temp!=nullptr && i<pos-1;i++){
        temp=temp->next;
    } 
    if(temp==nullptr||temp->next==nullptr){
        return;
    }
    Node* place=temp->next;
    temp->next=temp->next->next;
    delete place;
}

3)length of linked list

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* next;
};

Node* head=nullptr;

int length(){
    Node* temp=head;
    int count=0;
    while(temp!=nullptr){
        count++;
        temp=temp->next;
    }
    return count;
}

int main(){
    vector<int> arr={1,2,3,4,5};
    if(!arr.empty()){
        head=new Node{arr[0],nullptr};
        Node* temp=head;
        for(int i=1;i<arr.size();i++){
            temp->next=new Node{arr[i],nullptr};
            temp=temp->next;
        }
    }
    int result=length();
    cout<<result;
    while(head!=nullptr){
        Node* temp=head;
        head=head->next;
        delete temp;
    }
}

4)search an element in linked list

#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* next;
};


int search(Node* head,int val){
    Node* temp=head;
    int index=0;
    while(temp!=nullptr){
        if(temp->data==val){
            return index;
        }
        else{
            temp=temp->next;
            index++;
        }
    }
    return -1;
}

int main(){
    vector<int> arr={1,2,3,4};
    int val=4;
    Node* head=new Node{arr[0],nullptr};
    head->next=new Node{arr[1],nullptr};
    head->next->next=new Node{arr[2],nullptr};
    head->next->next->next=new Node{arr[3],nullptr};
    int result=search(head,4);
    cout<<result;
    while(head!=nullptr){
        Node* temp=head;
        head=head->next;
        delete temp;
    }
}

5)insertion in doubly linked list

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    Node* prev;
    
    Node(int data1,Node* next1,Node* prev1){
        data=data1;
        next=next1;
        prev=prev1;
    }
    
    Node(int data1){
        data=data1;
        next=nullptr;
        prev=nullptr;
    }
};

Node* head=nullptr;

void insert_at_beginning(int val){
    Node* newnode=new Node(val);
    newnode->next=head;
    if(head!=nullptr){
        head->prev=newnode;
    }
    head=newnode;
}

void insert_at_end(int val){
    Node* newnode=new Node(val);
    newnode->next=nullptr;
    if(head==nullptr){
        head=newnode;
        return;
    }
    Node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    if(temp!=nullptr){
        temp->next=newnode;
        newnode->prev=temp;
    }
}

void insert_at_pos(int val,int pos){
    Node* newnode=new Node(val);
    if(pos==1){
        newnode->next=head;
        if(head!=nullptr){
        head->prev=newnode;
        }
        head=newnode;
        return;
    }
    Node* temp=head;
    for(int i=1;temp!=nullptr && i<pos-1;i++){
        temp=temp->next;
    }
    if(temp==nullptr){
        delete newnode;
        return;
    }
    newnode->next=temp->next;
    newnode->prev=temp;
    if(temp->next!=nullptr){
        temp->next->prev=newnode;
    }
    temp->next=newnode;
}

void display(){
    if(head==nullptr){
        return;
    }
    Node* temp=head;
    while(temp!=nullptr){
        cout<<" "<<temp->data;
        temp=temp->next;
    }
    cout<<endl;
}

int main(){
    insert_at_beginning(2);
    insert_at_beginning(5);
    insert_at_end(3);
    insert_at_pos(4,3);
    display();
}

6)deletion in doubly linked list

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* prev;
    Node* next;
    
    Node(int data1,Node* prev1, Node* next1){
        data=data1;
        prev=prev1;
        next=next1;
    }
    Node(int data1){
        data=data1;
        prev=nullptr;
        next=nullptr;
    }
};

Node* head=nullptr;

void delete_at_beginning(){
    if(head==nullptr){
        return;
    }
    Node* temp=head;
    if(head->next!=nullptr){
        head=head->next;
        head->prev=nullptr;
    }
    else{
        head=nullptr;
    }
    delete temp;
}

void delete_at_end(){
    if(head==nullptr){
        return;
    }
    if(head->next==nullptr){
        delete head;
        head=nullptr;
        return;
    }
    Node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    temp->prev->next=nullptr;
    delete temp;
}

void delete_at_pos(int pos){
    if(head==nullptr||pos<=0){
        return;
    }
    
    Node* temp=head;
    
    if(pos==1){
        head=head->next;
        if(head!=nullptr){
            head->prev=nullptr;
        }
        delete temp;
        return;
    }
    
    for(int i=1;temp!=nullptr && i<pos;i++){
        temp=temp->next;
    }
    
    if(temp==nullptr){
        return;
    }
    
    if(temp->next!=nullptr){
        temp->next->prev=temp->prev;
        temp->prev->next=temp->next;
    }
    else{
        temp->prev->next=nullptr;
    }
    delete temp;
}

int main(){
    vector<int> arr={2,4,1,3};
    head=new Node(arr[0]);
    Node* current=head;
    for(int i=1;i<arr.size();i++){
        Node* newnode=new Node(arr[i]);
        current->next=newnode;
        newnode->prev=current;
        current=newnode;
    }
}

7)reverse doubly linked list

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* prev;
    Node* next;
    
    Node(int data1,Node* prev1, Node* next1){
        data=data1;
        prev=prev1;
        next=next1;
    }
    Node(int data1){
        data=data1;
        prev=nullptr;
        next=nullptr;
    }
};

Node* arrtoDLL(vector<int> arr){
    Node* head=new Node(arr[0]);
    Node* current=head;
    for(int i=1;i<arr.size();i++){
        Node* temp=new Node(arr[i]);
        current->next=temp;
        temp->prev=current;
        current=temp;
    }
    return head;
}

void display(Node* head){
    while(head!=nullptr){
        cout<<head->data<<" ";
        head=head->next;
    }
}

Node* reverseDLL(Node* head){
    if(head==NULL||head->next==NULL){
        return head;
    }
    Node* current=head;
    Node* temp=nullptr;
    while(current!=NULL){
        temp=current->prev;
        current->prev=current->next;
        current->next=temp;
        current=current->prev;
    }
    return temp->prev;
}

int main(){
    vector<int> arr={1,2,3,4,5};
    Node* head=arrtoDLL(arr);
    display(head);
    cout<<endl;
    head=reverseDLL(head);
    display(head);
}

8)reverse linked list 

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int data1,Node* next1){
        data=data1;
        next=next1;
    }
    Node(int data1){
        data=data1;
        next=nullptr;
    }
};

Node* reverseLL(Node* head){
    if(head==nullptr||head->next==nullptr){
        return head;
    }
    Node* temp=head;
    Node* prev=nullptr;
    while(temp!=nullptr){
        Node* front=temp->next;
        temp->next=prev;
        prev=temp;
        temp=front;
    }
    return prev;
}

int main(){
    vector<int> arr={1,2,3,4,5};
    Node* head=new Node(arr[0]);
    Node* current=head;
    for(int i=1;i<arr.size();i++){
        current->next=new Node(arr[i],nullptr);
        current=current->next;
    }
    head=reverseLL(head);
    while(head!=nullptr){
        cout<<head->data<<" ";
        head=head->next;
    }
}

9)middle element of linked list

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int data1,Node* next1){
        data=data1;
        next=next1;
    }
    Node(int data1){
        data=data1;
        next=nullptr;
    }
};

Node* findmiddle(Node* head){
    if(head==nullptr||head->next==nullptr){
        return head;
    }
    Node* slow=head;
    Node* fast=head;
    while(fast!=nullptr&&fast->next!=nullptr){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}

int main(){
    vector<int> arr={1,2,3,4,5,6};
    Node* head=new Node(arr[0]);
    Node* current=head;
    for(int i=1;i<arr.size();i++){
        current->next=new Node(arr[i],nullptr);
        current=current->next;
    }
    Node* middle=findmiddle(head);
    cout<<middle->data;
}

10)length of loop in linked list

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int data1,Node* next1){
        data=data1;
        next=next1;
    }
    Node(int data1){
        data=data1;
        next=nullptr;
    }
};

int count(Node* slow, Node* fast){
    int cnt=1;
    fast=fast->next;
    while(slow!=fast){
        cnt++;
        fast=fast->next;
    }
    return cnt;
}


int findloop(Node* head){
    if(head==nullptr||head->next==nullptr){
        return -1;
    }
    Node* slow=head;
    Node* fast=head;
    while(fast!=nullptr&&fast->next!=nullptr){
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast){
            return count(slow,fast);
        }
    }
    return -1;
}

int main(){
    Node* head=new Node(1);
    Node* second=new Node(2);
    Node* third=new Node(3);
    Node* fourth=new Node(4);
    Node* fifth=new Node(5);
    head->next=second;
    second->next=third;
    third->next=fourth;
    fourth->next=fifth;
    fifth->next=second;
    int loop=findloop(head);
    cout<<loop;
}

11)start of loop

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int data1,Node* next1){
        data=data1;
        next=next1;
    }
    Node(int data1){
        data=data1;
        next=nullptr;
    }
};

Node* startnode(Node* head){
    if(head==nullptr||head->next==nullptr){
        return nullptr;
    }
    Node* slow=head;
    Node* fast=head;
    while(fast!=nullptr&&fast->next!=nullptr){
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast){
            slow=head;
            while(slow!=fast){
                slow=slow->next;
                fast=fast->next;
            }
            return slow;
        }
    }
    return nullptr;
}

int main(){
    Node* head=new Node(1);
    Node* second=new Node(2);
    Node* third=new Node(3);
    Node* fourth=new Node(4);
    Node* fifth=new Node(5);
    head->next=second;
    second->next=third;
    third->next=fourth;
    fourth->next=fifth;
    fifth->next=second;
    Node* start=startnode(head);
    cout<<"cycle starts at node with value: "<<start->data;
}

12)segregate even and odd nodes

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int data1,Node* next1){
        data=data1;
        next=next1;
    }
    
    Node(int data1){
        data=data1;
        next=nullptr;
    }
};

Node *head, *tail;

void print(Node* head){
    if(head==nullptr||head->next==nullptr){
        cout<<head->data<<endl;
        return;
    }
    while(head!=nullptr){
        cout<<head->data<<"-->";
        head=head->next;
    }
    cout<<"null"<<endl;
}

void create(int val){
    Node* newnode=new Node(val);
    if(head==nullptr){
        head=newnode;
        tail=newnode;
    }
    else{
        tail->next=newnode;
        tail=newnode;
    }
}

Node* segregate(){
    Node* oddhead=new Node(-1), *oddtail=oddhead;
    Node* evenhead=new Node(-1), *eventail=evenhead;
    Node* current=head;
    Node* temp;
    while(current!=nullptr){
        temp=current;
        current=current->next;
        temp->next=nullptr;
        if(temp->data & 1){
            oddtail->next=temp;
            oddtail=temp;
        }
        else{
            eventail->next=temp;
            eventail=temp;
        }
    }
    eventail->next=oddhead->next;
    return evenhead->next;
}

int main(){
    create(1);
    create(2);
    create(3);
    create(4);
    cout<<"Initial linked list: "<<endl;
    print(head);
    Node* result=segregate();
    cout<<"\nAfter segregation of odd and even: "<<endl;
    print(result);
}

13)intersection of two linked list

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int data1,Node* next1){
        data=data1;
        next=next1;
    }
    
    Node(int data1){
        data=data1;
        next=nullptr;
    }
};


void print(Node* head){
    if(head==nullptr||head->next==nullptr){
        cout<<head->data<<endl;
        return;
    }
    while(head->next!=nullptr){
        cout<<head->data<<"-->";
        head=head->next;
    }
    cout<<head->data<<endl;
}

void create(Node* &head,int val){
    Node* newnode=new Node(val);
    if(head==nullptr){
        head=newnode;
        return;
    }
    Node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    temp->next=newnode;
    return;
}

Node* intersection(Node* head1, Node* head2){
    Node* n1=head1;
    Node* n2=head2;
    while(n1!=n2){
        n1=n1==nullptr? head2:n1->next;
        n2=n2==nullptr? head1:n2->next;
    }
    return n1;
}

int main(){
    Node* head=nullptr;
    create(head,1);
    create(head,3);
    create(head,1);
    create(head,2);
    create(head,4);
    Node* head1=head;
    head=head->next->next->next;
    Node* head2=nullptr;
    create(head2,3);
    head2->next=head;
    cout<<"List1: "; print(head1);
    cout<<"List2: "; print(head2);
    Node* result=intersection(head1,head2);
    cout<<"\nIntersection is at node with val: "<<result->data<<endl;
}

14)linked list palindrome 

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int data1,Node* next1){
        data=data1;
        next=next1;
    }
    
    Node(int data1){
        data=data1;
        next=nullptr;
    }
};

Node* head;

Node* reverse(Node* head){
    if(head==nullptr||head->next==nullptr){
        return head;
    }
    Node* temp=head;
    Node* prev=nullptr;
    while(temp!=nullptr){
        Node* front=temp->next;
        temp->next=prev;
        prev=temp;
        temp=front;
    }
    return prev;
}

bool palindrome(Node* head){
    if(head==nullptr||head->next==nullptr){
        return true;
    }
    Node* slow=head;
    Node* fast=head;
    while(fast!=nullptr && fast->next!=nullptr){
        slow=slow->next;
        fast=fast->next->next;
    }
    Node* temp=reverse(slow->next);
    Node* n1=head;
    Node* n2=temp;
    while(n2!=nullptr){
        if(n1->data!=n2->data){
            reverse(temp);
            return false;
        }
        n1=n1->next;
        n2=n2->next;
    }
    reverse(temp);
    return true;
}

void print(Node* head){
    if(head==nullptr||head->next==nullptr){
        cout<<head->data<<endl;
        return;
    }
    while(head->next!=nullptr){
        cout<<head->data<<"-->";
        head=head->next;
    }
    cout<<head->data<<endl;
}

void create(int val){
    Node* newnode=new Node(val);
    if(head==nullptr){
        head=newnode;
        return;
    }
    Node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    temp->next=newnode;
    return;
}


int main(){
    create(1);
    create(2);
    create(3);
    create(2);
    create(1);
    if(palindrome(head)){
        cout<<"Given linked list is a palindrome"<<endl;
    }
    else{
        cout<<"Given linked list is not a palindrome"<<endl;
    }
}

15)remove Nth node from end of linked list

#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int data1,Node* next1){
        data=data1;
        next=next1;
    }
    
    Node(int data1){
        data=data1;
        next=nullptr;
    }
};

Node* head=nullptr;

Node* nth_node(Node* head,int n){
    Node* slow=head;
    Node* fast=head;
    
    for(int i=0;i<n;i++){
        fast=fast->next;
    }
    
    if(fast==nullptr){
        return head->next;
    }
    
    while(fast->next!=nullptr){
        slow=slow->next;
        fast=fast->next;
    }
    
    Node* temp=slow->next;
    slow->next=slow->next->next;
    delete temp;
    return head;
}

void print(Node* head){
    if(head==nullptr||head->next==nullptr){
        cout<<head->data<<endl;
        return;
    }
    while(head->next!=nullptr){
        cout<<head->data<<"-->";
        head=head->next;
    }
    cout<<head->data<<endl;
}

void create(int val){
    Node* newnode=new Node(val);
    if(head==nullptr){
        head=newnode;
        return;
    }
    Node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    temp->next=newnode;
    return;
}


int main(){
    create(1);
    create(2);
    create(3);
    create(4);
    create(5);
    head=nth_node(head,3);
    print(head);
}

16)delete all occurences of key in dll

#include <bits/stdc++.h>
using namespace std;

class Node{
 public:
    int data;
    Node* prev;
    Node* next;
    
    Node(int data1, Node* prev1, Node* next1){
        data=data;
        prev=prev1;
        next=next1;
    }
    
    Node(int data1){
        data=data1;
        prev=nullptr;
        next=nullptr;
    }
};


Node* deletekey(Node* &head,int val){
    Node* temp=head;
    while(temp!=nullptr){
        if(temp->data==val){
            Node* todelete=temp;
            if(temp==head){
                head=temp->next;
                if(head!=nullptr) head->prev=nullptr;
                }
            else{
                if(temp->prev!=nullptr){
                    temp->prev->next=temp->next;
                    }
                if(temp->next!=nullptr){
                    temp->next->prev=temp->prev;
                    }
                }
            temp=temp->next;
            delete todelete;
        }
        else{
            temp=temp->next;
            }
    }
    return head;
}

int main(){
    vector<int> arr={1,2,2,3,2,4};
    Node* head=new Node(arr[0]);
    Node* temp=head;
    for(int i=1;i<arr.size();i++){
        Node* newnode=new Node(arr[i]);
        temp->next=newnode;
        newnode->prev=temp;
        temp=newnode;
    }
    deletekey(head,2);
    while(head->next!=nullptr){
        cout<<head->data<<"->";
        head=head->next;
    }
    cout<<head->data<<endl;
}

17)delete duplicates in sorted dll

#include <bits/stdc++.h>
using namespace std;

class Node{
 public:
    int data;
    Node* prev;
    Node* next;
    
    Node(int data1, Node* prev1, Node* next1){
        data=data;
        prev=prev1;
        next=next1;
    }
    
    Node(int data1){
        data=data1;
        prev=nullptr;
        next=nullptr;
    }
};


Node* duplicates(Node* &head){
    Node* temp=head;
    while(temp!=nullptr&&temp->next!=nullptr){
        if(temp->data==temp->next->data){
            Node* todelete=temp->next;
            temp->next=temp->next->next;
            if(temp->next!=nullptr){
                temp->next->prev=temp;
            }
            delete todelete;
        }
        else{
            temp=temp->next;
        }
    }
    return head;
}

int main(){
    vector<int> arr={1,2,2,3,4,4};
    Node* head=new Node(arr[0]);
    Node* temp=head;
    for(int i=1;i<arr.size();i++){
        Node* newnode=new Node(arr[i]);
        temp->next=newnode;
        newnode->prev=temp;
        temp=newnode;
    }
    duplicates(head);
    while(head->next!=nullptr){
        cout<<head->data<<"->";
        head=head->next;
    }
    cout<<head->data<<endl;
}

18)find pairs with given sum in a dll

#include <bits/stdc++.h>
using namespace std;

class Node{
 public:
    int data;
    Node* prev;
    Node* next;
    
    Node(int data1, Node* prev1, Node* next1){
        data=data;
        prev=prev1;
        next=next1;
    }
    
    Node(int data1){
        data=data1;
        prev=nullptr;
        next=nullptr;
    }
};


void pairsum(Node *head,int x){
    Node* left=head;
    Node* right=head;
    while(right->next!=nullptr){
        right=right->next;
    }
    while(left!=right&&right->next!=left){
        int sum=left->data+right->data;
        if(sum==x){
            cout<<"{"<<left->data<<","<<right->data<<"}"<<endl;
            left=left->next;
            right=right->prev;
        }
        else{
            if(sum<x){
                left=left->next;
            }
            else{
                right=right->prev;
            }
        }
    }
}

int main(){
    vector<int> arr={2,3,4,10,12};
    Node* head=new Node(arr[0]);
    Node* temp=head;
    for(int i=1;i<arr.size();i++){
        Node* newnode=new Node(arr[i]);
        temp->next=newnode;
        newnode->prev=temp;
        temp=newnode;
    }
    pairsum(head,14);
}

20)add two numbers

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* temp=new ListNode(0);
        ListNode* curr=temp;
        int carry=0;
        while(l1!=nullptr||l2!=nullptr||carry!=0){
            int val1=(l1!=nullptr)?l1->val:0;
            int val2=(l2!=nullptr)?l2->val:0;
            int sum=val1+val2+carry;
            carry=sum/10;
            int n=sum%10;
            curr->next=new ListNode(n);
            curr=curr->next;
            if(l1)l1=l1->next;
            if(l2)l2=l2->next;
        }
        ListNode* result=temp->next;
        delete temp;
        return result;
    }
};
